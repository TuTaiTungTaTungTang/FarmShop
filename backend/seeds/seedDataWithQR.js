require("dotenv").config({ path: "./config/.env" });

const mongoose = require("mongoose");
const User = require("../model/user");
const Shop = require("../model/shop");
const Product = require("../model/product");
const Event = require("../model/event");
const Order = require("../model/order");
const Conversation = require("../model/conversation");
const Messages = require("../model/messages");
const CouponCode = require("../model/coupounCode");
const Withdraw = require("../model/withdraw");
const { generateProductQR } = require("../utils/qrGenerator");

const connectDB = async () => {
  try {
    console.log("üîÑ Connecting to MongoDB:", process.env.DB_URL);
    await mongoose.connect(process.env.DB_URL, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log("‚úÖ MongoDB connected successfully");

    // Force drop all indexes and recreate only the correct traceabilityId index
    const productCollection = mongoose.connection.collection("products");
    try {
      await productCollection.dropIndexes();
      console.log("üóëÔ∏è Dropped ALL indexes on products collection");
    } catch (err) {
      console.warn("‚ö†Ô∏è Could not drop all indexes:", err.message);
    }
    await productCollection.createIndex({ traceabilityId: 1 }, { unique: true, sparse: true });
    console.log("‚úÖ Recreated traceabilityId index as unique & sparse");
  } catch (error) {
    console.error("‚ùå Database connection error:", error);
    process.exit(1);
  }
};

const seedCompleteData = async () => {
  try {
    console.log("üóëÔ∏è Clearing existing data...");
    
    // X√≥a T·∫§T C·∫¢ d·ªØ li·ªáu c≈©
    await User.deleteMany({});
    await Shop.deleteMany({});
    await Product.deleteMany({});
    await Event.deleteMany({});
    await Order.deleteMany({});
    await Conversation.deleteMany({});
    await Messages.deleteMany({});
    await CouponCode.deleteMany({});
    await Withdraw.deleteMany({});

    console.log("‚úÖ Cleared all existing data");

    // 1. üëë T·∫°o ADMIN USER
    console.log("üëë Creating admin user...");
    const admin = await User.create({
      name: "Admin User",
      email: "admin@eshop.com",
      password: "admin123",
      role: "Admin",
      avatar: "admin-avatar.png",
    });

    // 2. üë• T·∫°o TEST USERS
    console.log("üë• Creating test users...");
    const users = await User.create([
      {
        name: "John Doe",
        email: "john@example.com",
        password: "123456",
        avatar: "user1-avatar.png",
        addresses: [{
          country: "Vietnam",
          city: "Ho Chi Minh",
          address1: "123 Nguyen Hue Street",
          zipCode: 70000,
          addressType: "Home"
        }]
      },
      {
        name: "Jane Smith", 
        email: "jane@example.com",
        password: "123456",
        avatar: "user2-avatar.png",
        addresses: [{
          country: "Vietnam",
          city: "Hanoi",
          address1: "456 Le Loi Street",
          zipCode: 10000,
          addressType: "Office"
        }]
      },
      {
        name: "Mike Johnson",
        email: "mike@example.com", 
        password: "123456",
        avatar: "user3-avatar.png",
      }
    ]);

    // 3. üè™ T·∫°o TEST SHOPS
    console.log("üè™ Creating test shops...");
    const shops = await Shop.create([
      {
        name: "TechStore Vietnam",
        email: "techstore@example.com",
        password: "shop123",
        description: "Chuy√™n cung c·∫•p thi·∫øt b·ªã c√¥ng ngh·ªá ch·∫•t l∆∞·ª£ng cao v·ªõi QR truy xu·∫•t",
        address: "456 L√™ L·ª£i, Qu·∫≠n 1, TP.HCM, Vi·ªát Nam",
        phoneNumber: 84901234567,
        zipCode: 70000,
        avatar: "techstore-avatar.png",
        availableBalance: 15000,
      },
      {
        name: "N√¥ng S·∫£n S·∫°ch Premium",
        email: "nongsansach@example.com", 
        password: "shop123",
        description: "N√¥ng s·∫£n h·ªØu c∆° truy xu·∫•t ngu·ªìn g·ªëc t·ª´ trang tr·∫°i",
        address: "789 Hai B√† Tr∆∞ng, Qu·∫≠n 3, TP.HCM, Vi·ªát Nam",
        phoneNumber: 84909876543,
        zipCode: 70000,
        avatar: "organic-avatar.png",
        availableBalance: 8000,
      },
      {
        name: "Fashion Hub VN",
        email: "fashion@example.com",
        password: "shop123", 
        description: "Th·ªùi trang xu h∆∞·ªõng v·ªõi tem truy xu·∫•t ch·∫•t l∆∞·ª£ng",
        address: "321 Nguy·ªÖn Tr√£i, Qu·∫≠n 5, TP.HCM, Vi·ªát Nam",
        phoneNumber: 84905555666,                                                                                                                           
        zipCode: 70000,
        avatar: "fashion-avatar.png",
        availableBalance: 5500,
      }
    ]);

    // 4. üì¶ T·∫°o PRODUCTS (S·∫º C√ì QR SAU)
    console.log("üì¶ Creating products...");
    const productsData = [
      {
        name: "MacBook Pro M2 256GB - Truy xu·∫•t ngu·ªìn g·ªëc",
        description: "MacBook Pro m·ªõi nh·∫•t v·ªõi chip M2, b·∫£o h√†nh ch√≠nh h√£ng Apple. C√≥ QR code truy xu·∫•t ngu·ªìn g·ªëc nh·∫≠p kh·∫©u.",
        category: "Computers and Laptops",
        tags: "laptop,apple,macbook,traceability,authentic",
        originalPrice: 1299,
        discountPrice: 1199,
        stock: 50,
        images: ["macbook1.png", "macbook2.png"],
        shopId: shops[0]._id,
        shop: {
          name: shops[0].name,
          shop_avatar: { public_id: "test", url: shops[0].avatar },
          ratings: 4.5
        },
        sold_out: 25,
        ratings: 4.5
      },
      {
        name: "G·∫°o ST25 H·ªØu C∆° - Tr·∫°i N√¥ng S·∫£n S·∫°ch",
        description: "G·∫°o ST25 h·ªØu c∆° ƒë∆∞·ª£c tr·ªìng theo ti√™u chu·∫©n VietGAP t·∫°i ƒê·ªìng Th√°p. Truy xu·∫•t ƒë∆∞·ª£c t·ª´ ru·ªông ƒë·∫øn b√†n ƒÉn.",
        category: "Others",
        tags: "rice,organic,vietnam,traceable,st25",
        originalPrice: 25,
        discountPrice: 22,
        stock: 100,
        images: ["rice1.png", "rice2.png"],
        shopId: shops[1]._id,
        shop: {
          name: shops[1].name,
          shop_avatar: { public_id: "test", url: shops[1].avatar },
          ratings: 4.8
        },
        sold_out: 45,
        ratings: 4.7
      },
      {
        name: "iPhone 14 Pro Max 256GB - Ch√≠nh h√£ng VN/A",
        description: "iPhone 14 Pro Max ch√≠nh h√£ng v·ªõi ƒë·∫ßy ƒë·ªß tem CO CQ, phi·∫øu b·∫£o h√†nh. QR truy xu·∫•t nh·∫≠p kh·∫©u ch√≠nh h√£ng.",
        category: "Mobile and Tablets", 
        tags: "phone,apple,iphone,authentic,warranty",
        originalPrice: 1099,
        discountPrice: 999,
        stock: 30,
        images: ["iphone1.png", "iphone2.png"],
        shopId: shops[0]._id,
        shop: {
          name: shops[0].name,
          shop_avatar: { public_id: "test", url: shops[0].avatar },
          ratings: 4.5
        },
        sold_out: 15,
        ratings: 4.8
      },
      {
        name: "C√† ph√™ Arabica ƒê√† L·∫°t - Nguy√™n ch·∫•t",
        description: "C√† ph√™ Arabica tr·ªìng t·∫°i ƒë·ªô cao 1500m ƒê√† L·∫°t, rang xay nguy√™n ch·∫•t. Truy xu·∫•t t·ª´ trang tr·∫°i c√† ph√™.",
        category: "Others",
        tags: "coffee,arabica,dalat,organic,traceable",
        originalPrice: 15,
        discountPrice: 12,
        stock: 200,
        images: ["coffee1.png", "coffee2.png"], 
        shopId: shops[1]._id,
        shop: {
          name: shops[1].name,
          shop_avatar: { public_id: "test", url: shops[1].avatar },
          ratings: 4.8
        },
        sold_out: 80,
        ratings: 4.6
      },
      {
        name: "√Åo Thun Nam Cotton 100% - Made in Vietnam",
        description: "√Åo thun nam ch·∫•t li·ªáu cotton 100% ƒë∆∞·ª£c d·ªát v√† may t·∫°i Vi·ªát Nam. QR truy xu·∫•t ngu·ªìn g·ªëc v·∫£i v√† quy tr√¨nh s·∫£n xu·∫•t.",
        category: "Cloths",
        tags: "tshirt,cotton,vietnam,fashion,traceable",
        originalPrice: 20,
        discountPrice: 16, 
        stock: 75,
        images: ["tshirt1.png", "tshirt2.png"],
        shopId: shops[2]._id,
        shop: {
          name: shops[2].name,
          shop_avatar: { public_id: "test", url: shops[2].avatar },
          ratings: 4.3
        },
        sold_out: 30,
        ratings: 4.4
      },
      {
        name: "ChƒÉm s√≥c th√∫ c∆∞ng - Th·ª©c ƒÉn cho ch√≥ Premium",
        description: "Th·ª©c ƒÉn cao c·∫•p cho ch√≥ con v√† ch√≥ tr∆∞·ªüng th√†nh, c√≥ ch·ª©ng nh·∫≠n ch·∫•t l∆∞·ª£ng. QR truy xu·∫•t th√†nh ph·∫ßn v√† ngu·ªìn g·ªëc.",
        category: "Pet Care",
        tags: "pet,dog,food,premium,safe",
        originalPrice: 35,
        discountPrice: 30,
        stock: 60,
        images: ["petfood1.png", "petfood2.png"],
        shopId: shops[1]._id,
        shop: {
          name: shops[1].name,
          shop_avatar: { public_id: "test", url: shops[1].avatar },
          ratings: 4.8
        },
        sold_out: 20,
        ratings: 4.5
      },
      {
        name: "B·ªô qu√† t·∫∑ng cao c·∫•p - Premium Gift Set",
        description: "B·ªô qu√† t·∫∑ng cao c·∫•p g·ªìm nhi·ªÅu s·∫£n ph·∫©m ƒë·∫∑c bi·ªát, c√≥ h·ªôp ƒë·∫πp v√† QR truy xu·∫•t ngu·ªìn g·ªëc t·ª´ng m√≥n qu√†.",
        category: "Gifts", 
        tags: "gift,premium,luxury,traceable,special",
        originalPrice: 80,
        discountPrice: 65,
        stock: 40,
        images: ["giftset1.png", "giftset2.png"],
        shopId: shops[2]._id,
        shop: {
          name: shops[2].name,
          shop_avatar: { public_id: "test", url: shops[2].avatar },
          ratings: 4.3
        },
        sold_out: 12,
        ratings: 4.2
      }
    ];

    const products = await Product.create(productsData);

    // 5. üîÑ T·∫†O QR CODE CHO T·∫§T C·∫¢ PRODUCTS
    console.log("üîÑ Generating QR codes for all products...");
    for (let i = 0; i < products.length; i++) {
      const product = products[i];
      console.log(`üîÑ Creating QR for: ${product.name}`);
      
      const qrResult = await generateProductQR(product._id, product);
      
      if (qrResult.success) {
        await Product.findByIdAndUpdate(product._id, {
          qrCode: qrResult.qrCodePath,
          qrCodeUrl: qrResult.qrCodeUrl,
          traceabilityId: qrResult.traceabilityId
        });
        console.log(`‚úÖ QR generated: ${product.name.slice(0, 30)}...`);
      } else {
        console.log(`‚ùå QR failed: ${product.name}`);
      }
    }

    // 6. üéâ T·∫°o EVENTS v·ªõi QR
    console.log("üéâ Creating events with QR codes...");
    const eventsData = [
      {
        name: "Black Friday - MacBook Pro Sale",
        description: "Gi·∫£m gi√° ƒë·∫∑c bi·ªát MacBook Pro trong d·ªãp Black Friday. S·∫£n ph·∫©m c√≥ QR truy xu·∫•t ngu·ªìn g·ªëc.",
        category: "Computers and Laptops",
        start_Date: new Date(),
        Finish_Date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
        originalPrice: 1299,
        discountPrice: 999,
        stock: 20,
        images: ["macbook-event.png"],
        shopId: shops[0]._id,
        shop: {
          name: shops[0].name,
          shop_avatar: { public_id: "test", url: shops[0].avatar },
          ratings: 4.5
        },
        sold_out: 5,
        tags: "laptop,sale,blackfriday"
      },
      {
        name: "N√¥ng s·∫£n h·ªØu c∆° - Khuy·∫øn m√£i cu·ªëi nƒÉm", 
        description: "Gi·∫£m gi√° ƒë·∫∑c bi·ªát cho t·∫•t c·∫£ n√¥ng s·∫£n h·ªØu c∆° c√≥ truy xu·∫•t ngu·ªìn g·ªëc.",
        category: "Others",
        start_Date: new Date(),
        Finish_Date: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000),
        originalPrice: 50,
        discountPrice: 35,
        stock: 100,
        images: ["organic-event.png"],
        shopId: shops[1]._id,
        shop: {
          name: shops[1].name,
          shop_avatar: { public_id: "test", url: shops[1].avatar },
          ratings: 4.8
        },
        sold_out: 25,
        tags: "organic,sale,healthy"
      }
    ];

    const events = await Event.create(eventsData);

    // T·∫°o QR cho events
    for (const event of events) {
      const qrResult = await generateProductQR(event._id, event);
      if (qrResult.success) {
        await Event.findByIdAndUpdate(event._id, {
          qrCode: qrResult.qrCodePath,
          qrCodeUrl: qrResult.qrCodeUrl, 
          traceabilityId: qrResult.traceabilityId
        });
        console.log(`‚úÖ QR generated for event: ${event.name}`);
      }
    }

    // 7. üõçÔ∏è T·∫°o ORDERS
    console.log("üõçÔ∏è Creating sample orders...");
    const orders = await Order.create([
      {
        cart: [
          {
            _id: products[0]._id,
            name: products[0].name,
            price: products[0].discountPrice,
            qty: 1,
            image: products[0].images[0],
            shopId: products[0].shopId
          }
        ],
        shippingAddress: {
          address1: "123 Nguyen Hue Street",
          city: "Ho Chi Minh",
          country: "Vietnam",
          zipCode: 70000
        },
        user: {
          _id: users[0]._id,
          name: users[0].name,
          email: users[0].email
        },
        totalPrice: products[0].discountPrice,
        status: "Delivered",
        paymentInfo: {
          type: "Cash On Delivery",
          status: "Succeeded"
        },
        deliveredAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),
        createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000)
      },
      {
        cart: [
          {
            _id: products[1]._id,
            name: products[1].name, 
            price: products[1].discountPrice,
            qty: 2,
            image: products[1].images[0],
            shopId: products[1].shopId
          }
        ],
        shippingAddress: {
          address1: "456 Le Loi Street",
          city: "Hanoi", 
          country: "Vietnam",
          zipCode: 10000
        },
        user: {
          _id: users[1]._id,
          name: users[1].name,
          email: users[1].email
        },
        totalPrice: products[1].discountPrice * 2,
        status: "Processing",
        paymentInfo: {
          type: "Cash On Delivery"
        },
        createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000)
      }
    ]);

    // 8. üí¨ T·∫°o CONVERSATIONS & MESSAGES
    console.log("üí¨ Creating conversations and messages...");
    const conversations = await Conversation.create([
      {
        members: [users[0]._id.toString(), shops[0]._id.toString()],
        lastMessage: "Xin ch√†o, s·∫£n ph·∫©m c√≥ QR code truy xu·∫•t kh√¥ng?",
        lastMessageId: users[0]._id.toString(),
      },
      {
        members: [users[1]._id.toString(), shops[1]._id.toString()],
        lastMessage: "N√¥ng s·∫£n c·ªßa shop c√≥ ch·ª©ng nh·∫≠n h·ªØu c∆° kh√¥ng?",
        lastMessageId: users[1]._id.toString(),
      }
    ]);

    const messages = await Messages.create([
      {
        conversationId: conversations[0]._id.toString(),
        text: "Xin ch√†o, s·∫£n ph·∫©m c√≥ QR code truy xu·∫•t kh√¥ng?",
        sender: users[0]._id.toString(),
      },
      {
        conversationId: conversations[0]._id.toString(),
        text: "Ch√†o b·∫°n! C√≥ ·∫°, t·∫•t c·∫£ s·∫£n ph·∫©m ƒë·ªÅu c√≥ QR code ƒë·ªÉ truy xu·∫•t ngu·ªìn g·ªëc.",
        sender: shops[0]._id.toString(),
      },
      {
        conversationId: conversations[1]._id.toString(),
        text: "N√¥ng s·∫£n c·ªßa shop c√≥ ch·ª©ng nh·∫≠n h·ªØu c∆° kh√¥ng?",
        sender: users[1]._id.toString(),
      },
      {
        conversationId: conversations[1]._id.toString(),
        text: "C√≥ ·∫°, ch√∫ng t√¥i c√≥ ch·ª©ng nh·∫≠n VietGAP v√† c√≥ th·ªÉ truy xu·∫•t t·ª´ trang tr·∫°i.",
        sender: shops[1]._id.toString(),
      }
    ]);

    // 9. üéüÔ∏è T·∫°o COUPON CODES
    console.log("üéüÔ∏è Creating coupon codes...");
    const coupons = await CouponCode.create([
      {
        name: "NEWUSER10",
        value: 10,
        minAmount: 50,
        maxAmount: 100,
        shopId: shops[0]._id,
        selectedProduct: null,
        createdAt: new Date()
      },
      {
        name: "ORGANIC20",
        value: 20,
        minAmount: 30,
        maxAmount: 50,
        shopId: shops[1]._id,
        selectedProduct: products[1]._id,
        createdAt: new Date()
      }
    ]);

    // 10. üí∞ T·∫°o WITHDRAW REQUESTS
    console.log("üí∞ Creating withdraw requests...");
    const withdraws = await Withdraw.create([
      {
        seller: {
          _id: shops[0]._id,
          name: shops[0].name,
        },
        amount: 1000,
        status: "Processing",
        bankInfo: {
          bankName: "Vietcombank",
          bankCountry: "Vietnam", 
          bankSwiftCode: "BFTVVNVX",
          bankAccountNumber: "1234567890",
          bankHolderName: "Tech Store Vietnam",
          bankAddress: "Ho Chi Minh City"
        },
        createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000)
      }
    ]);

    console.log("\nüéâ COMPLETE SEED DATA WITH QR CODES CREATED!");
    console.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    console.log(`üëë Admin: 1`);
    console.log(`üë§ Users: ${users.length}`);
    console.log(`üè™ Shops: ${shops.length}`);
    console.log(`üì¶ Products: ${products.length} (all with QR codes)`);
    console.log(`üéâ Events: ${events.length} (all with QR codes)`);
    console.log(`üõçÔ∏è Orders: ${orders.length}`);
    console.log(`üí¨ Conversations: ${conversations.length}`);
    console.log(`üì® Messages: ${messages.length}`);
    console.log(`üéüÔ∏è Coupons: ${coupons.length}`);
    console.log(`üí∞ Withdraws: ${withdraws.length}`);

    console.log("\nüîë LOGIN CREDENTIALS:");
    console.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    console.log("üîß ADMIN:");
    console.log("   Email: admin@eshop.com");
    console.log("   Password: admin123");
    console.log("\nüë§ USERS:");
    console.log("   Email: john@example.com | Password: 123456");
    console.log("   Email: jane@example.com | Password: 123456");
    console.log("   Email: mike@example.com | Password: 123456");
    console.log("\nüè™ SHOPS:");
    console.log("   Email: techstore@example.com | Password: shop123");
    console.log("   Email: nongsansach@example.com | Password: shop123");
    console.log("   Email: fashion@example.com | Password: shop123");

    console.log("\nüå± QR CODE FEATURES:");
    console.log("   ‚úÖ All products have QR codes with traceability");
    console.log("   ‚úÖ All events have QR codes");
    console.log("   ‚úÖ QR codes saved in /uploads/qr-codes/");
    console.log("   ‚úÖ Scan QR to trace product origin (FaceFarm style)");
    console.log("   ‚úÖ Full conversation & message system");
    console.log("   ‚úÖ Sample orders with delivery status");
    console.log("   ‚úÖ Coupon codes and withdraw requests");

  } catch (error) {
    console.error("‚ùå Error seeding complete data:", error);
  } finally {
    console.log("\nüîå Closing database connection...");
    mongoose.connection.close();
    process.exit(0);
  }
};

// Ch·∫°y seed
if (require.main === module) {
  console.log("üöÄ Starting COMPLETE seed data with QR codes...");
  connectDB().then(() => {
    seedCompleteData();
  });
}

module.exports = { seedCompleteData };